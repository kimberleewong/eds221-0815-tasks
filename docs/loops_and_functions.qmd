---
title: "loops_and_functions"
author: "Kimmy Wong"
format: html
editor_options: 
  chunk_output_type: console
---

## task 1
```{r}

weekdays <- c("monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday")
transects <- c("transect a", "transect b", "transect c")

out_matrix <- matrix(nrow = length(weekdays), ncol = length(transects))

for (i in 1:length(weekdays)) {
  for(j in 1:length(transects)) {
   combo <- (paste0(weekdays[i], " - ", transects[j]))
   out_matrix[i, j] <- combo
  }
}
```

## task 2
```{r}
force <- function(mass, accel) {
  F <- mass * accel
  return(paste0("The resulting force is", " ", F, " Newtons."))
}

# try it
force(100,2)
```

## task 3
```{r}

fish_weight <- function(fish_name, tot_length) {
  
  fish_parms <- data.frame(sci_name = c("Chanos chanos",
                                      "Sphyraena barracuda",
                                      "Caranax ignobilis"),
                         common_name = c("Milkfish",
                                         "Great barracuda",
                                         "Giant trevally"),
                         a_est = c(0.0905,
                                   0.0181,
                                   0.0353),
                         b_est = c(2.52,
                                   3.27,
                                   3.05))
  fish_select <- filter(fish_parms, common_name == fish_name)
  
  weight <- fish_select$a_est * (tot_length^fish_select$b_est)
  
  return(weight)
  }

length_vec <- seq(0, 100, 1) 

milkfish_weights <- fish_weight("Milkfish", length_vec)

fish_weight("Giant trevally", 10)

```

## task 4
```{r}
wave_power <- function(H, T) {
  P_deep <- 0.5 * (H^2) * T
  return(P_deep)
}

height_seq <- seq(0, 3, 0.2)

wave_power(height_seq, 8)
```

## task 5
```{r}
wave_energy <- function(D, H, T) {
  if (D > 12) {
    message("deep water equation used :0")
  } else if (D <= 12) {
    message("shallow water equation was used :<")
  }

  if (D > 12) {
    P_deep <- 0.5 * (H^2) * T
  return(P_deep)
  } else if ( D <= 12) {
    P_shallow <- 0.81 * (H^2) * T
  return(P_shallow)
  }
}
wave_energy(13,12,1)
```







